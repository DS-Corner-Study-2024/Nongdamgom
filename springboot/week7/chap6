ORM: Object Relational Mapping, 객체 관계 매핑, 객체지향 언어에서 의미하는 객체와 RDB(Relational Database)의 테이블을 자동으로 매핑하는 방법
ORM 장점
ORM을 사용하면서 데이터베이스 쿼리를 객체지향적으로 조작 가능
재사용 및 유지보수 편리
데베에 대한 종속성 줄어듦
단점
ORM만으로 온전한 서비스 구현 한계
애플리케이션의 객체 관점과 데베의 관계 관점 불일치 발생

JPA: Java Persistence API, 자바 진영의 ORM 기술 표준으로 채택된 인터페이스의 모음
ORM이 큰 개념이라면 JPA는 더 구체화된 스펙 포함

하이버네이트: 자바의 ORM 프레임워크, JPA가 정의하는 인터페이스를 구현하고 있는 JPA 구현체 중 하나
영속성 컨텍스트(Persistence Context): 애플리케이션과 데이터베이스 사이에서 엔티티와 레코드의 괴리를 해소하는 기능과 객체를 보관하는 기능 수행
엔티티 객체가 영속성 컨텍스트에 들어와 JPA의 관리 대상이 되는 시점부터는 해당 객체를 영속 객체(Persistence Object)라고 부름

엔티티 매니저(EntityManager): 엔티티를 관리하는 객체, 데이터베이스에 접근해서 CRUD 작업을 수행함

엔티티 생명주기-> 엔티티 객체 구분: 비영속/영속/준영속/삭제
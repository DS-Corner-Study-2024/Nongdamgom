9. 연관관계 매핑
연관관계 매핑 종류
One to One, One To Many, Many to One, Many To Many
방향
단방향: 두 엔티티의 관계에서 한쪽의 엔티티만 참조
양방향: 두 엔티티의 관계에서 각 엔티티가 서로의 엔티티 참조

일대일 단방향 매핑
@OneToOne 어노테이션- 다른 엔티티 객체를 필드로 정의했을 때 일대일 연관관계로 매핑하기 위해 사용됨
@JoinColumn 어노테이션- 매핑할 외래키 설정
@JoinColumn 어노테이션에서 사용할 수 있는 속성
name: 매핑할 외래키의 이름 설정
referencedColumnName: 외래키가 참조할 상대 테이블의 칼럼명 지정
foreignKey: 외래키를 생성하면서 지정할 제약조건 설정

@OneToOne 어노테이션에 'optional = false' 속성 설정-> product가 null인 값을 허용하지 않게 됨
@OneToOne 어노테이션에 'optional = false' 속성을 지정한 경우- left outer join이 inner join으로 바뀌어 실행됨

다대일 단방향 매핑
쿼리로 데이터를 저장할 때는 provider_id 값만 들어감
product 테이블에는 @JoinColumn에 설정한 이름을 기반으로 자동으로 값을 선정해서 추가하게 됨
Product 엔티티에서 단방향으로 Provider 엔티티 연관관계를 맺고 있기 때문에 ProductRepository만으로도 Provider 객체도 조회 가능

다대일 양방향 매핑
일대다 연관관계- 여러 상품 엔티티가 포함될 수 있어 컬렉션 형식으로 필드 생성
@OneToMany가 붙은 쪽에서 @JoinColumn 어노테이션을 사용하면 상대 엔티티에 외래키 설정됨
& 롬복의 ToString에 의해 순환참조 발생 가능-> ToString에서 제외 처리를 하는 것이 좋음
'fetch = FetchType.EAGER'로 설정한 것은 @OneToMany의 기본 fetch 전략이 Lazy이기 때문에 즉시 로딩으로 지정한 것
지연 로딩 방식 사용-> 'no Session'으로 에러 발생

자연 로딩 & 즉시 로딩
엔티티라는 객체의 개념으로 데베를 구현했기 때문에 연관관계를 가진 각 엔티티 클래스에는 연관관계가 있는 객체들이 필드에 존재하게 됨
연관관계와 상관 없이 즉각 해당 엔티티의 값만 조회하고 싶거나 연관관계를 가진 테이블의 값도 조회하고 싶은 경우 등 여러 조건들을 만족하기 위해 등장한 개념

일대다 단방향 매핑
상품 분류 엔티티에서 @OneToMany & @JoinColumn을 사용하면 상품 엔티티에서 별도의 설정을 하지 않아도 일대다 단방향 연관관계가 매핑됨
@JoinColumn 어노테이션은 필수 사항 x, 사용하지 않으면 중간 테이블로 Join 테이블이 생성되는 전략 채택됨

다대다 매핑
-> 실무에서 거의 사용되지 않는 구성
다대다 연관관계에서는 각 엔티티에서 서로를 리스트로 가지는 구조가 만들어짐
이런 경우에는 교차 엔티티라고 부르는 중간 테이블 생성-> 다대다 관계를 일대다 or 다대일 관계로 해소

영속성 전이
특정 엔티티의 영속성 상태를 변경할 때 그 엔티티와 연관된 엔티티의 영속성에도 영향을 미쳐 영속성 상태를 변경하는 것 의미
연관관계와 관련된 어노테이션-> cascade() 요소 존재
이 어노테이션은 영속성 전이를 설정하는 데 활용됨
cascade() 요소와 함께 사용하는 영속성 전이 타입
ALL: 모든 영속 상태 변경에 대해 영속성 전이 적용
PESIST: 엔티티가 영속화할 때 연관된 엔티티도 함께 영속화
MERGE: 엔티티를 영속성 컨텍스트에 병합할 때 연관된 엔티티도 병합
REMOVE: 엔티티를 제거할 때 연관된 엔티티도 제거
REFRESH: 엔티티를 새로고침할 때 연관된 엔티티도 새로고침
DETACH: 엔티티를 영속성 컨텍스트에서 제외하면 연관된 엔티티도 제외

고아 객체
부모 엔티티와 연관관계가 끊어진 엔티티
JPA에는 고아 객체를 자동으로 제거하는 기능 O
자식 엔티티가 다른 엔티티와 연관관계를 가지고 있다면 사용하지 않는 것이 좋음
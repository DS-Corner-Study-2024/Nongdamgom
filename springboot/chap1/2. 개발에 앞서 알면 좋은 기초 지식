1. 서버 간 통신
마이크로서비스 아키텍처(MSA): 서비스 규모를 작게 나누어 구성한 아키텍처 <-> 단일 서비스 아키텍처
ex. 포털 사이트<-마이크로 서비스 아키텍처 적용 => 애플리케이션 하나에 여러 기능을 넣어 개발x, 블로그 프로젝트/카페 프로젝트/메일 프로젝트 등 애플리케이션을 기능별로 나눠서 개발
단일 서비스: 원하는 자원을 가져와 사용, 마이크로서비스 아키텍처: 각 서비스 간에 통신해야 하는 경우 발생
ex. 사용자-> 블로그 기능 사용 => 로그인 서비스를 거쳐야 함 => '서버 간 통신'
서버 간 통신=> 한 서버가 다른 서버에 통신을 요청하는 것/ 한 대는 서버, 다른 한 대는 클라이언트/ 가장 많이 사용되는 방식: HTTP/HTTPS
2. 스프링 부트의 동작 방식
스프링 부트에서 spring-boot-starter-web 모듈을 사용하면 기본적으로 톰캣(Tomcat)을 사용하는 스프링 MVC 구조를 기반으로 동작
서블릿(Servlet): 클라이언트 요청을 처리&결과를 반환하는 자바 웹 프로그래밍 기술, 일반적으로 서블릿 컨테이너에서 관리
서블릿 컨테이너: 서블릿 인스턴스를 생성하고 관리하는 역할을 수행하는 주체, 톰캣: WAS의 역할과 서블릿 컨테이너의 역할을 수행하는 대표적인 컨테이너
ㄴ 특징: 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기 관리/서블릿 객체는 싱글톤 패턴으로 관리됨/멀티 스레딩 지원
스프링에서는 DispatcherServlet이 서블릿의 역할 수행, 일반적으로 스프링은 톰캣을 임베드해 사용-> 서블릿 컨테이너와 DispatcherServlet은 자동 설정된 web.xml의 설정값 공유
3. 레이어드 아키텍처
애플리케이션의 컴포넌트를 유사 관심사를 기준으로 레이어로 묶어 수평적으로 구성한 구조를 의미함
프레젠테이션 계층/비즈니스 계층/데이터 접근 계층
4. 디자인 패턴
디자인 패턴을 구체화 해서 정리한 대표적인 분류 방식: GoF 디자인 패턴(Gang of Four)
생성 패턴/구조 패턴/행위 패턴
생성 패턴- 추상 팩토리, 빌더, 팩토리 메서드. 프로토타입, 싱글톤
구조 패턴- 어댑터, 브리지, 컴포지트, 데코레이터, 퍼사드, 플라이웨이트, 프락시
행위 패턴- 책임 연쇄, 커맨드, 인터프리터, 이터레이터, 미디에이터, 메멘토, 옵저버, 스테이트, 스트래티지, 템플릿 메서드, 비지터
5. REST API
REST: Representational State Transfer, 월드와이드웹과 같은 분산 하이퍼미디어 시스템 아키텍처의 한 형식,
주고받는 자원에 이름을 규정&URI에 명시해 HTTP 메서드(GET, POST, PUT, DELETE)를 통해 해당 자원의 상태를 주고받음
API: Application Programming Interface, 애플리케이션에서 제공하는 인터페이스, API를 통해 서버 또는 프로그램 사이를 연결
REST 특징: 유니폼 인터페이스, 무상태성, 캐시 가능성, 레이어 시스템, 클라이언트-서버 아키텍처
REST의 URI 설계 규칙: URI의 마지막에는 '/'를 포함하지 x/언더바(_) 사용x, 대신 하이픈(-) 사용/URL에는 행위(동사)가 아닌 결과(명사) 포함/URI는 소문자로 작성/파일의 확장자는 URI에 포함x
7.4 JUnit을 활용한 테스트 코드 작성
JUnit 세부 모듈- JUnit Platform, JUnit Jupiter, JUnit Vintage
JUnit 생명 주기와 관련되어 테스트 순서에 관여하게 되는 대표적인 어노테이션
- @Test, @BeforeAll, @BeforeEach, @AfterAll, @AfterEach

리포지토리 객체의 테스트
리포지토리=> 개발자가 구현하는 레이어 중 가장 데이터베이스와 가까움, JpaResponsitory를 상속받아 기본적인 쿼리 메서드 사용 가능
-> 리포지토리 테스트는 특히 구현하는 목적에 대해 고민하고 작성해야 함
기본 메서드에 대한 테스트는 큰 의미x
데이터베이스 연동 여부 고려

코드 커버리지: 소프트웨어의 테스트 수준이 충분한지를 표현하는 지표 중 하나
JaCoCo=> 커버리지를 확인하기 위한 다양한 커버리지 도구 중 가장 보편적으로 사용되는 도구

TDD: Test-Driven Development, 테스트 주도 개발
반복 테스트를 이용한 소프트웨어 개발 방법론, 테스트 코드를 먼저 작성한 후 테스트를 통과하는 코드를 작성하는 과정을 반복하는 소프트웨어 개발 방식
애자일 방법론 중 하나인 익스트림 프로그래밍의 Test-First 개념에 기반을 둔, 개발 주기가 짧은 개발 프로세스로 단순한 설계 중시

테스트 주도 개발 효과: 디버깅 시간 단축, 생산성 향상, 재설계 시간 단축, 기능 추가와 같은 추가 구현 용이
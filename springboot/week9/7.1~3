7.1 테스트 코드 작성 이유
- 개발 과정에서 문제 미리 발견 가능
- 리팩토링의 리스크 줄어듦
- 애플리케이션을 가동해서 직접 테스트하는 것보다 더 빠르게 진행 가능
- 하나의 명세 문서로서의 기능 수행
- 몇 가지 프레임워크에 맞춰 테스트 코드를 작성하면 좋은 코드 생산 가능
- 코드가 작성된 목적 명확하게 표현 가능, 불필요한 내용 추가 방지

7.2 단위 테스트 & 통합 테스트
- 단위 테스트: 애플리케이션의 개별 모듈을 독립적으로 테스트 하는 방식
테스트 대상의 범위를 기준으로 가장 작은 단위의 테스트 방식, 일반적으로 메서드 단위로 테스트 수행, 메서드 호출을 통해 의도한 결괏값이 나오는지 확인하는 수준으로 테스트 진행,
적은 비용-> 빠른 피드백
- 통합 테스트: 애플리케이션을 구성하는 다양한 모듈을 결합해 전체적인 로직이 의도한 대로 동작하는지 테스트하는 방식
모듈을 통합하는 과정에서의 호환성 등을 포함해 애플리케이션이 정상적으로 동작하는지 확인하기 위해 수행하는 테스트 방식, 일반적으로 특정 모듈에 대한 테스트만 진행,
테스트를 수행할 때마다 모든 컴포넌트 동작-> 높은 비용

7.3 테스트 코드 작성 방법
1. Given-When-Then 패턴
2. F.I.R.S.T
Fast, Isolated, Repeatable, Self-Validating, Timely
